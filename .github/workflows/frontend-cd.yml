name: Frontend CD

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'starter/frontend/**'

defaults:
  run:
    working-directory: starter/frontend

jobs:
  run-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Frontend Environment
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install --verbose

      - name: Run linting jobs
        run: npm run lint --fix

  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Frontend Environment
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install --verbose

      - name: Run testing jobs
        run: npm run test

  build:
    needs: [run-lint, run-test]
    runs-on: ubuntu-latest
    env:
      REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --cache-from $REGISTRY/$REPOSITORY:latest --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Deploy K8s manifests
        working-directory: starter/frontend/k8s
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws sts get-caller-identity
          aws eks --region $AWS_REGION update-kubeconfig --name cluster
          kubectl config current-context
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
          kubectl get pods
          kubectl get svc

      - name: Post Deployment Comment
        if: success()
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"body": "Deployment successful for Frontend!"}' \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments
